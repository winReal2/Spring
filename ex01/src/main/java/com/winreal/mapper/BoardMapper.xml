<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- mapper의 namespace속성은 연결할 mapper의 interface 풀 경로로 작성 -->  
<mapper namespace="com.winreal.mapper.BoardMapper">

	<!-- select는 resultType 작성해줘야함! -->
	<!--  
		select 태그 작성
		id : mapper의 메서드명
		resultType : 기본타입, 
					  객체타입(select 쿼리의 결과를 특정 틀래스의 객체로 저장)
					 쿼리실행 결과를 resultType의 속성에 저장
					 
		CDATA : 파서가 마크업이 아닌 문자로만 해석할 수 있도록 처리
				XML에서 부등호를 사용하기 위해 사용			 	
	 -->
	<select id="getListXml" resultType="com.winreal.vo.BoardVO">
		<![CDATA[
		select *
			from (
				  select t.*, rownum rn
				  from (
						select * 
						 from tbl_board 
						 where bno>0
		]]>						 
						 <include refid="criteria"></include>
						 order by bno desc
						 ) t
				 )
		 	where rn between #{startNo} and #{endNo}
	</select>
	<!-- 
		동적인 쿼리 작성 
		myBatis는 내부적으로 preparedStatement를 활용합니다
		? => #{속성}
		
		쿼리작성시 필요한 정보는 메서드의 매개변수를 통해 받아올 수 있습니다.
	-->
	<insert id="insert"> 
		insert into tbl_board (bno, title, content, writer) 
		values (seq_board.nextval, #{title},#{content},#{writer})
	</insert>
	
	
	<!-- 
		selectKey
		생성된 시퀀스 값을 VO객체의 속성에 저장후 사용합니다!
	 -->
	<insert id="insertSelectKey"> 
		<!-- keyProperty : 어디다 저장할지 -->
		<selectKey keyProperty="bno" order="BEFORE" resultType="int" >
		select seq_board.nextval from dual
		</selectKey>
		
		insert into tbl_board (bno, title, content, writer) 
		values (#{bno}, #{title},#{content},#{writer})
	</insert>

	<select id="getOne" resultType="com.winreal.vo.BoardVO">
		select * from tbl_board where bno=#{bno}
	</select>

	<delete id="delete">
		delete tbl_board where bno=#{bno}
	</delete>
	
	<update id="update">
		update tbl_board
			set title= #{title}
			, content = #{content}
			, updateDate = sysdate
		where bno = #{bno}	
	</update>
	
	<select id = "getTotalCnt" resultType="int">
		select count(*) 
		from tbl_board
		where 1=1  <!-- true / 검색환경 맞춰주기 -->
		<!-- 조건 -->
		<include refid="criteria"></include>
	</select>
	
	<!-- 
		반복되는 쿼리를 미리 작성해놓고 재활용합니다
			반복할 쿼리 선언 : <sql id="">
			선언한 쿼리 사용 : <include refId="">
			변수 사용 방법 <property name="">
			
			refId = reference id
	 -->
	<sql id="criteria">
		<choose>
			<when test="searchField == 'title'">
				and title like '%' || #{searchWord}||'%'
			</when>
			<when test="searchField == 'content'">
				and content like '%' || #{searchWord}||'%'				
			</when>
			<when test="searchField == 'writer'">
				and writer like '%' || #{searchWord}||'%'							
			</when>
		</choose>
	</sql>
	
</mapper>
